function [results, output, model] = run_analysis_SSVEP_compare(set, approach, folds)
%RUN_ANALYSIS_SSVEP_COMPARE evaluate dataset on the fold generated by
% aawedha
% created 01-02-2020
% last modified : -- -- --
% Okba Bekhelifi, <okba.bekhelif@univ-usto.dz>

nSubj = utils_fetch_Set_Folder(set);
interSubject_results = zeros(2, nSubj);
% results = zeros(2, nSubj);
eval_duration = 1; % 1 second time for evaluation
% fold : subjects, nfolds, phase (phase=train/test, 1 :train;2:test)

if ismatrix(folds)
   nfolds = size(folds,1);   
else
    nfolds = size(folds,2);
end

for subj = 1:nSubj
    set.subj = subj;
    %     trainEEG = dataio_read_SSVEP(set,'train');
    %     testEEG = dataio_read_SSVEP(set, 'test');
    data = dataio_read_SSVEP(set, 'all');
  
    for fld = 1:nfolds
        if ismatrix(folds)
            f = {folds{fld,1:3}};
        else
            f = {folds{subj,fld,1:3}};
        end
        [trainEEG, testEEG] = split_data(data, f);
        samples = size(trainEEG.epochs.signal,1);
        windowLength = samples/trainEEG.fs;
        disp(['Analyising data from subject:' ' ' trainEEG.subject.id]);
        %% Train & Test
        if (~isfield(approach, 'features'))
            features = trainEEG.epochs;
            features.fs = trainEEG.fs;
            features.stimuli_frequencies = trainEEG.paradigm.stimuli;
            test_features = testEEG.epochs;
        else
            approach.features.options.mode = 'estimate';
            features = extractSSVEP_features(trainEEG, approach);
            approach = utils_augment_approach(approach, features.af);
            approach.features.mode = 'transform';
            test_features = extractSSVEP_features(testEEG, approach);
        end
        clear trainEEG testEEG
        model = ml_trainClassifier(features, approach.classifier, approach.cv);
        output_train = ml_applyClassifier(features, model);
        clear features
        output_test = ml_applyClassifier(test_features, model);
        clear test_features
        %% Display & plot results
        interSubject_results(1, subj,fld) = output_train.accuracy;
        interSubject_results(2, subj,fld) = output_test.accuracy;
        output ={output_train, output_test, windowLength};
        %     accuracy, kappa, alg
        results.train_acc(subj,fld) = output_train.accuracy;
        results.test_acc(subj, fld) = output_test.accuracy;
        % ITR
        n_targets = length(unique(output_train.y));
        evaluation_time = eval_duration + windowLength;
        results.itr(subj,fld) = evaluation_ITR(n_targets, output_test.accuracy, evaluation_time);
        disp(['Accuracy on Train set: ' num2str(output_train.accuracy)]);
        disp(['Accuracy on Test set: ' num2str(output_test.accuracy)]);
        disp( ['Accuracy on Total data: ' num2str(mean(interSubject_results(:, subj)))]);
        disp(['ITR : ' num2str(results.itr(subj,fld))]);
        disp(repmat('-',1,50))
    end
end
disp(['Average accuracy on ' set.title ' ' num2str(mean(interSubject_results(2,:)))]);
end

function [trainEEG, testEEG] = split_data(data,fold)
fld_train = [fold{1},fold{2}] + 1;
fld_test = fold{3} + 1;
%
trainEEG.fs = data.fs;
trainEEG.classes = data.classes;
trainEEG.subject = data.subject;
trainEEG.paradigm = data.paradigm;
trainEEG.montage = data.montage;
testEEG.fs = data.fs;
testEEG.classes = data.classes;
testEEG.subject = data.subject;
testEEG.paradigm = data.paradigm;
testEEG.montage = data.montage;
%
trainEEG.epochs.signal = data.epochs.signal(:,:,fld_train);
trainEEG.epochs.y = data.epochs.y(:,fld_train);
trainEEG.epochs.events = data.epochs.events(:,fld_train);
%
testEEG.epochs.signal = data.epochs.signal(:,:,fld_test);
testEEG.epochs.y = data.epochs.y(:,fld_test);
testEEG.epochs.events = data.epochs.events(:,fld_test);
end

